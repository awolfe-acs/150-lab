# JavaScript Modularization Implementation Plan for 150-lab

## 1. Project Overview

This plan outlines the modularization of the `150-lab/src/js/animation.js` file. Currently, `animation.js` is a large, monolithic file that contains a wide variety of animation, UI, and utility functions. The goal is to refactor this file into smaller, focused modules, improving code organization, maintainability, readability, and reusability. This will also make debugging and future feature development more efficient.

## 2. Current State

The `150-lab/src/js/animation.js` file encompasses:
- Hero section animations (text reveal, number countdown, button interactions).
- Video scaling animation.
- "Get Involved" section text and logo animations.
- Sliding cards animation.
- Page navigation logic (active links, title updates, scroll detection).
- Audio management (preload, play, mute toggle, click sounds).
- Fancy button hover effects.
- Generic scroll reveal animations.
- Split text (lines and characters) animations with dynamic recalculation.
- Infinite marquee animation.
- Event list item hover interactions.
- Share button and share panel functionality.
- Global resize handling and reinitialization of animations.
- Extensive use of global `window` properties for state management.

This tightly coupled structure makes it challenging to understand individual features, test components in isolation, and introduce new animations without affecting existing logic.

## 3. Proposed New Directory Structure

The refactored JavaScript code will reside within `150-lab/src/js/` with new subdirectories for better categorization:

```
/150-lab/src/js/
├── main.js                     # Main application entry point
├── background.js               # (Existing) Shader background initialization
├── video.js                    # (Existing) Main video initialization
├── animations/                 # Contains modules for specific animation sections
│   ├── hero.js                 # Hero section animations (H1, number, enter button)
│   ├── getInvolved.js          # "Get Involved" section animations (text, logo, cards)
│   ├── marquee.js              # Infinite marquee animation for form panel
│   └── scrollReveal.js         # Generic scroll reveal animations for elements
├── ui/                         # Contains modules for user interface interactions
│   ├── audio.js                # All audio loading, playback, and toggle logic
│   ├── fancyButtons.js         # Fancy button hover/click effects
│   ├── pageNavigation.js       # Page navigation and section linking
│   ├── scrollDownIcon.js       # Logic for the scroll-down icon
│   └── share.js                # Share button and share panel functionality
├── utils/                      # General utility functions
│   ├── debounce.js             # Debounce utility function
│   ├── globalHandlers.js       # Global resize and reinitialization handlers
│   └── splitText.js            # SplitType initialization, cleanup, and refresh logic
└── config/                     # Configuration and shared state for animations
    └── animationConfig.js      # Centralized store for shared GSAP objects (e.g., tweens, ScrollTriggers)
```

## 4. Step-by-Step Refactoring Process

This process ensures a controlled migration, maintaining functionality at each major step.

### Phase 1: Setup and Core Utilities

**Step 1.1: Create New Directories and Empty Files**
- Create the following directories inside `150-lab/src/js/`: `animations`, `ui`, `utils`, `config`.
- Create empty `.js` files for each proposed module:
    - `animations/hero.js`
    - `animations/getInvolved.js`
    - `animations/marquee.js`
    - `animations/scrollReveal.js`
    - `ui/audio.js`
    - `ui/fancyButtons.js`
    - `ui/pageNavigation.js`
    - `ui/scrollDownIcon.js`
    - `ui/share.js`
    - `utils/debounce.js`
    - `utils/globalHandlers.js`
    - `utils/splitText.js`
    - `config/animationConfig.js`

**Step 1.2: Extract `debounce` Utility**
- **From `animation.js`**: Cut the `debounce` function.
- **To `utils/debounce.js`**: Paste the `debounce` function and add `export default debounce;`.
- **In `animation.js` (temporarily)**: Replace the `debounce` function definition with `import debounce from "./utils/debounce.js";`.

**Step 1.3: Centralize GSAP and SplitType Registrations and Global GSAP/ScrollTrigger State**
- **From `animation.js`**:
    - Cut `gsap.registerPlugin(ScrollTrigger);` and `gsap.registerPlugin(MorphSVGPlugin);`.
    - Cut `let heroYearObj = { year: 2026 };`
    - Cut `let heroNumberTween = null;`
    - Cut `let heroHeadingFadeScrollTrigger = null;`
- **To `main.js`**: Paste `gsap.registerPlugin(ScrollTrigger);` and `gsap.registerPlugin(MorphSVGPlugin);` and `gsap.registerPlugin(SplitType);` at the top (after other imports). This ensures plugins are registered once globally.
- **To `config/animationConfig.js`**:
    ```javascript
    export const animationState = {
        heroYearObj: { year: 2026 },
        heroNumberTween: null,
        heroHeadingFadeScrollTrigger: null,
        // Add any other shared mutable GSAP/ScrollTrigger references here
    };

    // Helper to reset state on reinitialization if needed
    export function resetAnimationState() {
        animationState.heroYearObj.year = 2026;
        if (animationState.heroNumberTween) {
            animationState.heroNumberTween.kill();
            animationState.heroNumberTween = null;
        }
        if (animationState.heroHeadingFadeScrollTrigger) {
            animationState.heroHeadingFadeScrollTrigger.kill();
            animationState.heroHeadingFadeScrollTrigger = null;
        }
        // ... reset other state variables as needed
    }
    ```
- **In `animation.js` (temporarily)**: Update references to `heroYearObj`, `heroNumberTween`, `heroHeadingFadeScrollTrigger` to import from `config/animationConfig.js` (e.g., `import { animationState } from "./config/animationConfig.js";` and use `animationState.heroYearObj`, etc.).

### Phase 2: Modularize UI Components

**Step 2.1: Extract Audio Management to `ui/audio.js`**
- **From `animation.js`**: Cut `preloadBackgroundAudio`, `playBackgroundAudio`, `playBackgroundAudioWhenReady`, `handleVisibilityChange`, `setupUIClickSounds`, `playUIClickSound`, `handleNewAudioElement`. Also cut all related `window` variables (`window.backgroundAudio`, `window.audioInitialized`, `window.audioMuted`, etc.) and `uiClickAudioUrl`, `backgroundAudioUrl` imports.
- **To `ui/audio.js`**: Paste these functions and variables.
    - Export `preloadBackgroundAudio`, `setupUIClickSounds`, `playBackgroundAudio` (if `main.js` or other modules need to trigger it).
    - Refactor `window` variables into local module scope variables where possible, or encapsulate them within a single `export const audioState = { ... };` object.
    - Import `uiClickAudioUrl` and `backgroundAudioUrl`.
    ```javascript
    // ui/audio.js
    import uiClickAudioUrl from "../../public/audio/ui-click.mp3?url";
    import backgroundAudioUrl from "../../public/audio/chemistry2.mp3?url";
    import gsap from "gsap"; // Assuming gsap is needed for waveAnimation.pause/resume

    // Internal module state
    let backgroundAudioInstance = null;
    let audioInitialized = false;
    let audioMuted = false;
    let userInteracted = false;
    let heroAnimationComplete = false; // Will be set by hero animation module
    let backgroundAudioLoaded = false;
    let enterButtonClicked = false;
    let audioRetryCount = 0;
    const maxAudioRetries = 10;
    let audioRetryTimer = null; // Declare here

    // ... (Paste all audio functions) ...

    export function preloadBackgroundAudio() { /* ... implementation ... */ }
    export function setupUIClickSounds() { /* ... implementation ... */ }
    export const playBackgroundAudio = (fromEnterButton = false) => { /* ... implementation ... */ };
    export function handleNewAudioElement(element) { /* ... implementation ... */ }
    // Export the state for other modules to read, but not directly modify
    export const getAudioState = () => ({
        audioInitialized,
        audioMuted,
        userInteracted,
        heroAnimationComplete,
        backgroundAudioLoaded,
        enterButtonClicked,
        backgroundAudioInstance // Access the instance if needed
    });
    // Functions to update internal state (called by other modules)
    export function setHeroAnimationComplete(value) { heroAnimationComplete = value; }
    export function setEnterButtonClicked(value) { enterButtonClicked = value; }
    export function toggleMute() { /* ... implementation ... */ } // Logic to toggle audioMuted and control backgroundAudioInstance volume
    ```
- **In `animation.js` (temporarily)**: Remove audio functions. Update `initHeroAnimation` and `initAnimations` to import and call `preloadBackgroundAudio()` and `setupUIClickSounds()`. Update `enterExperienceBtn` click listener to call `audio.playBackgroundAudio(true)` and set `audio.setEnterButtonClicked(true)`. Update `soundToggle` to call `audio.toggleMute()`.

**Step 2.2: Extract Scroll Down Icon to `ui/scrollDownIcon.js`**
- **From `animation.js`**: Cut `createScrollDownIcon` and its associated `window.scrollDownIcon`, `window.scrollDownIconCleanup` properties.
- **To `ui/scrollDownIcon.js`**: Paste the function and add `export default createScrollDownIcon;`.
- **In `animation.js` (temporarily)**: Import `createScrollDownIcon from "./ui/scrollDownIcon.js";` and call it where needed (e.g., after `enterExperienceBtn` fades out).

**Step 2.3: Extract Fancy Buttons to `ui/fancyButtons.js`**
- **From `animation.js`**: Cut `initFancyButtonEffects` and `initSingleFancyButton`, and the `heroEventListenerAdded` flag.
- **To `ui/fancyButtons.js`**: Paste these functions. Export `initFancyButtonEffects`.
```javascript
// ui/fancyButtons.js
import gsap from "gsap"; // Import GSAP

let heroEventListenerAdded = false; // Module-scoped flag

export function initFancyButtonEffects() { /* ... implementation ... */ }
function initSingleFancyButton(button) { /* ... implementation ... */ }
```
- **In `animation.js` (temporarily)**: Import `initFancyButtonEffects from "./ui/fancyButtons.js";` and call it in `initAnimations`.

**Step 2.4: Extract Share Button and Panel to `ui/share.js`**
- **From `animation.js`**: Cut `initShareButtonOverlapDetection` and `initSharePanel` and their internal helpers (`getShareData`, `openShareUrl`, `copyToClipboard`, `showCopyFeedback`, `togglePanel`, `closePanel`).
- **To `ui/share.js`**: Paste these functions. Export `initShareButtonOverlapDetection` and `initSharePanel`.
```javascript
// ui/share.js
import gsap from "gsap"; // Import GSAP

export function initShareButtonOverlapDetection() { /* ... implementation ... */ }
export function initSharePanel() { /* ... implementation ... */ }
// ... (internal helper functions) ...
```
- **In `animation.js` (temporarily)**: Import from `ui/share.js` and call in `initAnimations`.

**Step 2.5: Extract Page Navigation to `ui/pageNavigation.js`**
- **From `animation.js`**: Cut `updatePageNavigation` and all its internal helpers (`updateActiveTitle`, `getElementScrollPosition`, `sections` array, `updateSectionBoundaries`, `handleScroll`, `handleResize`, `initializeNavigation`, `oneTimeScrollHandler`).
- **To `ui/pageNavigation.js`**: Paste these functions. Export `updatePageNavigation`.
```javascript
// ui/pageNavigation.js
import gsap from "gsap";
import debounce from "../utils/debounce.js"; // Import debounce

export function updatePageNavigation() { /* ... implementation ... */ }
// ... (internal helper functions) ...
```
- **In `animation.js` (temporarily)**: Import `updatePageNavigation from "./ui/pageNavigation.js";` and call in `initAnimations`.

### Phase 3: Modularize Animations

**Step 3.1: Extract Split Text Utils to `utils/splitText.js`**
- **From `animation.js`**: Cut `initSplitLinesAnimation`, `initSplitCharsAnimation`, `cleanupSplitLines`, `refreshSplitLines`, `cleanupSplitChars`, `refreshSplitChars`, `waitForFonts`, `waitForImages`.
- **To `utils/splitText.js`**: Paste these functions. Export all `init`, `cleanup`, `refresh` functions.
```javascript
// utils/splitText.js
import SplitType from "split-type";
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger"; // Make sure ScrollTrigger is imported if used directly here

// Internal state for split instances
const splitInstances = [];
const splitCharsInstances = [];

export function initSplitLinesAnimation(elementsToSplit = null) { /* ... implementation ... */ }
export function cleanupSplitLines() { /* ... implementation ... */ }
export function refreshSplitLines() { /* ... implementation ... */ }
export function initSplitCharsAnimation(elementsToSplit = null) { /* ... implementation ... */ }
export function cleanupSplitChars() { /* ... implementation ... */ }
export function refreshSplitChars() { /* ... implementation ... */ }
// Internal helpers
function waitForFonts() { /* ... implementation ... */ }
function waitForImages(element) { /* ... implementation ... */ } // For lines
function processSplitElement(element, index) { /* ... implementation ... */ } // For chars
function processSplitCharsElement(element, index) { /* ... implementation ... */ } // For chars
```
- **In `animation.js` (temporarily)**: Replace the cut functions with imports from `utils/splitText.js`.

**Step 3.2: Extract Scroll Reveal Animation to `animations/scrollReveal.js`**
- **From `animation.js`**: Cut `initScrollRevealAnimation`.
- **To `animations/scrollReveal.js`**: Paste the function. Export `initScrollRevealAnimation`.
```javascript
// animations/scrollReveal.js
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";

export function initScrollRevealAnimation() { /* ... implementation ... */ }
```
- **In `animation.js` (temporarily)**: Import and call in `initAnimations`.

**Step 3.3: Extract Video Scale Animation to `animations/video.js`**
- **From `animation.js`**: Cut `animateVideoScale`.
- **To `animations/video.js`**: Paste the function. Export `animateVideoScale`.
```javascript
// animations/video.js
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";

export function animateVideoScale() { /* ... implementation ... */ }
```
- **In `animation.js` (temporarily)**: Import and call in `initAnimations`. (Note: This might conflict with `150-lab/src/js/video.js`. If `150-lab/src/js/video.js` also handles video animations, then `animateVideoScale` should probably be moved there instead, or `video.js` should become the entry point for all video-related animations.) For this plan, I'll assume `animateVideoScale` is part of the `animation.js` refactor.

**Step 3.4: Extract "Get Involved" Animations to `animations/getInvolved.js`**
- **From `animation.js`**: Cut `animateGetInvolvedText`, `initGetInvolvedLogoAnimation`, `animateSlidingCards`.
- **To `animations/getInvolved.js`**: Paste these functions. Export them.
```javascript
// animations/getInvolved.js
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";
import SplitType from "split-type"; // Needed for animateGetInvolvedText
import debounce from "../utils/debounce.js"; // Needed for animateSlidingCards resize handler

export function animateGetInvolvedText() { /* ... implementation ... */ }
export function initGetInvolvedLogoAnimation() { /* ... implementation ... */ }
export function animateSlidingCards() { /* ... implementation ... */ }
```
- **In `animation.js` (temporarily)**: Import and call in `initAnimations`.

**Step 3.5: Extract Marquee Animation to `animations/marquee.js`**
- **From `animation.js`**: Cut `initInfiniteMarqueeAnimation`.
- **To `animations/marquee.js`**: Paste the function. Export `initInfiniteMarqueeAnimation`.
```javascript
// animations/marquee.js
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";
import debounce from "../utils/debounce.js";

export function initInfiniteMarqueeAnimation() { /* ... implementation ... */ }
```
- **In `animation.js` (temporarily)**: Import and call in `initAnimations`.

**Step 3.6: Extract Hero Animations to `animations/hero.js`**
- **From `animation.js`**: Cut `initHeroAnimation`, `setupHeroHeadingFadeAnimation`, and the hero number countdown logic (GSAP tween and ScrollTrigger).
- **To `animations/hero.js`**: Paste these functions. Export `initHeroAnimation`.
- This module will need to import `gsap`, `ScrollTrigger`, `SplitType`, `createScrollDownIcon`, and `audio.setHeroAnimationComplete`, `audio.setEnterButtonClicked` from their respective modules.
```javascript
// animations/hero.js
import gsap from "gsap";
import ScrollTrigger from "gsap/ScrollTrigger";
import SplitType from "split-type";
import createScrollDownIcon from "../ui/scrollDownIcon.js";
import { animationState } from "../config/animationConfig.js"; // Import shared state
import { setHeroAnimationComplete, setEnterButtonClicked } from "../ui/audio.js"; // To update audio module state

// ... (Paste setupHeroHeadingFadeAnimation) ...
// ... (Paste initHeroAnimation) ...

export function initHeroAnimations() {
    // Call internal setup functions
    initHeroAnimation();
    setupHeroHeadingFadeAnimation();
    // ... any other hero-specific setups
}
```
- **In `animation.js` (temporarily)**: Remove all hero-related code.

### Phase 4: Consolidate `animation.js` and Update `main.js`

**Step 4.1: Create `utils/globalHandlers.js`**
- **From `animation.js`**: Cut `reinitializeAllSplitElements` and `initGlobalResizeHandler`.
- **To `utils/globalHandlers.js`**: Paste these functions. Export `initGlobalResizeHandler`.
- This module will need to import all the `cleanup` and `refresh` functions from `utils/splitText.js` and potentially other modules that might require reinitialization on resize. It will also import `animationState` and `resetAnimationState` from `config/animationConfig.js`.
```javascript
// utils/globalHandlers.js
import debounce from "./debounce.js";
import { setupHeroHeadingFadeAnimation } from "../animations/hero.js"; // To re-setup hero
import { cleanupSplitLines, refreshSplitLines, cleanupSplitChars, refreshSplitChars } from "./splitText.js";
import { animationState, resetAnimationState } from "../config/animationConfig.js"; // Import shared state

export function reinitializeAllSplitElements() { /* ... implementation ... */ }
export function initGlobalResizeHandler() { /* ... implementation ... */ }
```
- **In `animation.js` (temporarily)**: Import `initGlobalResizeHandler` and call it.

**Step 4.2: Final `animation.js` Cleanup**
- After all functions have been moved, the `animation.js` file should be empty or contain only imports and its own `initAnimations` function which now just calls the imported module init functions.
- The `initAnimations` function should import and call the main `init` function from each of the new animation and UI modules.

**Step 4.3: Update `main.js`**
- Remove the import for the original `animation.js`.
- Import the main initialization functions from the new modules:
    ```javascript
    // 150-lab/src/main.js
    // ... existing imports ...
    import { initHeroAnimations } from "./js/animations/hero.js";
    import { animateVideoScale } from "./js/animations/video.js";
    import { animateGetInvolvedText, initGetInvolvedLogoAnimation, animateSlidingCards } from "./js/animations/getInvolved.js";
    import { initInfiniteMarqueeAnimation } from "./js/animations/marquee.js";
    import { initScrollRevealAnimation } from "./js/animations/scrollReveal.js";
    import { preloadBackgroundAudio, setupUIClickSounds } from "./js/ui/audio.js";
    import { initFancyButtonEffects } from "./js/ui/fancyButtons.js";
    import { updatePageNavigation } from "./js/ui/pageNavigation.js";
    import { initShareButtonOverlapDetection, initSharePanel } from "./js/ui/share.js";
    import { initGlobalResizeHandler } from "./js/utils/globalHandlers.js"; // For global resize/reinit
    // ...
    ```
- Update the `document.addEventListener("DOMContentLoaded", ...)` block or `initAnimations` call to sequentially call the new module initialization functions.
    ```javascript
    // In main.js, inside initAnimations or DOMContentLoaded
    export function initAnimations() {
        // Preload audio (moved to audio.js and called once)
        preloadBackgroundAudio();

        ScrollTrigger.refresh();
        ScrollTrigger.clearMatchMedia();
        ScrollTrigger.getAll().forEach((st) => st.kill());
        // Reset shared animation state from config
        resetAnimationState();

        // Initialize animations and UI components
        initHeroAnimations();
        animateVideoScale(); // If not handled by 150-lab/src/js/video.js
        animateGetInvolvedText();
        initGetInvolvedLogoAnimation();
        animateSlidingCards();
        initInfiniteMarqueeAnimation();
        initScrollRevealAnimation();

        // UI related initializations
        setupUIClickSounds();
        initFancyButtonEffects();
        updatePageNavigation();
        initShareButtonOverlapDetection();
        initSharePanel();

        // Global handlers
        initGlobalResizeHandler();

        // Existing menu button handlers and scroll direction detection will remain in main.js
        // or can be further modularized if they become complex.
    }
    ```

**Step 4.4: Delete the original `animation.js` file**
- Once all content is moved and verified, delete the empty `150-lab/src/js/animation.js` file.

## 5. Key Considerations and Best Practices

-   **Import Paths**: Ensure all `import` and `export` paths are correct relative to the new module locations. Use relative paths like `../` or `../../` as needed.
-   **State Management**:
    -   Minimize direct `window` property access. Instead, pass necessary data as function arguments or use explicit import/export for shared state (e.g., `animationConfig.js` for GSAP shared objects, `audio.js` for audio-related state).
    -   For `window.lenis`, `window.heroAnimationComplete`, etc., decide if they truly need to be global. `lenis` is often global for convenience. `heroAnimationComplete` is a good candidate to be state managed by the `hero.js` module and communicated via custom events or a shared state object if other modules strictly depend on it. For this plan, it's pushed into the `audio.js` module, which should also manage its internal state.
-   **GSAP Instances**: When moving ScrollTriggers and Tweens, ensure `kill()` methods are called on reinitialization or before recreating them to prevent memory leaks and duplicate animations. `config/animationConfig.js` helps manage this.
-   **`SplitType`**: Ensure `SplitType` instances are properly `revert()`-ed or cleaned up before re-splitting text, especially on resize. `utils/splitText.js` should encapsulate this.
-   **Event Listeners**: Ensure event listeners are properly removed when modules are "killed" or reinitialized to prevent memory leaks.
-   **Dependencies**: Carefully review each module's dependencies. A module should only import what it directly uses.
-   **Error Handling**: Maintain existing error handling (e.g., `console.warn` for missing elements) and consider adding more robust checks if needed.
-   **Order of Initialization**: In `main.js`, the order in which module `init` functions are called might be important due to inter-dependencies (e.g., audio might need `heroAnimationComplete` to be set). Document any critical ordering.
-   **Testing**:
    -   **Unit Tests**: Test each new module in isolation to verify its specific functionality.
    -   **Integration Tests**: After refactoring, thoroughly test the entire application to ensure all animations and interactive elements work correctly together and across different screen sizes.

This modularization plan will transform `animation.js` into a clean, well-structured system, making the codebase easier to manage and extend in the future. 